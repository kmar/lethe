// hash support routines

//-----------------------------------------------------------------------------
struct hash_integer<T>
{
	nodiscard static uint hash(T v)
	{
		constexpr uint KEY1 = 0xdb91908du;
		constexpr uint KEY2 = 0x6be5be6fu;

		auto h = v;
		h ^= h >> 15;
		h *= KEY1;
		h ^= h >> 16;
		h *= KEY2;
		h ^= h >> 17;
		return cast uint h;
	}
}

//-----------------------------------------------------------------------------
nodiscard inline uint hash_merge(uint h1, uint h2)
{
	constexpr int amount = 9;
	auto rot9 = (h1 >> amount) | (h1 << (32-amount));

	return (rot9 * 7) ^ h2;
}

//-----------------------------------------------------------------------------
nodiscard inline uint hash_merge3(uint h1, uint h2, uint h3)
{
	return hash_merge(hash_merge(h1, h2), h3);
}

//-----------------------------------------------------------------------------
nodiscard inline uint hash_merge4(uint h1, uint h2, uint h3, uint h4)
{
	return hash_merge(hash_merge3(h1, h2, h3), h4);
}

// ... since we don't support function overloads ...
namespace __int
{
	nodiscard static inline uint hash(int value)
	{
		return hash_integer<uint>::hash(value);
	}
}

namespace __uint
{
	nodiscard static inline uint hash(uint value)
	{
		return hash_integer<uint>::hash(value);
	}
}

namespace __long
{
	nodiscard static inline uint hash(long value)
	{
		return hash_integer<ulong>::hash(value);
	}
}

namespace __ulong
{
	nodiscard static inline uint hash(ulong value)
	{
		return hash_integer<ulong>::hash(value);
	}
}

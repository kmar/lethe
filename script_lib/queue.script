// a simple double-ended queue
///////////////////////////////////////////////////////////////////////////////
struct queue<T>
{
	//---------------------------------------------------------------------
	void push_front(const T &value)
	{
		if (count == data.size)
			grow();

		--start;
		start += data.size * (start < 0);

		data[start] = value;

		++count;
	}

	//---------------------------------------------------------------------
	void push_back(const T &value)
	{
		if (count == data.size)
			grow();

		data[end++] = value;

		end *= end <= data.size;

		++count;
	}

	//---------------------------------------------------------------------
	T pop_front()
	{
		auto &tmp = data[start];
		T res = tmp;

		// because we can't destroy range in the script, we simply
		// swap with default
		T nullT;
		nullT <-> tmp;

		++start;
		start *= start < data.size;

		--count;

		return res;
	}

	//---------------------------------------------------------------------
	T pop_back()
	{
		auto &tmp = data[fix_index(count-1)];
		T res = tmp;

		// because we can't destroy range in the script, we simply
		// swap with default
		T nullT;
		nullT <-> tmp;

		--end;
		end += data.size * end < 0;

		--count;

		return res;
	}

	//---------------------------------------------------------------------
	T front() const
	{
		return data[fix_index(0)];
	}

	//---------------------------------------------------------------------
	T back() const
	{
		return data[fix_index(count-1)];
	}

	//---------------------------------------------------------------------
	inline int size() const
	{
		return count;
	}

	//---------------------------------------------------------------------
	inline bool empty() const
	{
		return !count;
	}

	//---------------------------------------------------------------------
	static inline T operator[](const queue &q, int index)
	{
		return q.data[q.fix_index(index)];
	}

	//---------------------------------------------------------------------
	static inline T &operator[](queue &q, int index)
	{
		return q.data[q.fix_index(index)];
	}

	//---------------------------------------------------------------------
	void reserve(int capacity)
	{
		data.reserve(capacity);
	}

	//---------------------------------------------------------------------
	void clear()
	{
		data.clear();
		start = end = count = 0;
	}

	//---------------------------------------------------------------------
	void reset()
	{
		data.reset();
		start = end = count = 0;
	}

	//---------------------------------------------------------------------
	void shrink()
	{
		data.shrink();
	}

///////////////////////////////////////////////////////////////////////////////
// private
	private array<T> data;
	private int start, end, count;

	//---------------------------------------------------------------------
	private inline int fix_index(int index) const
	{
		index += start;
		index -= (index >= data.size)*data.size;
		return index;
	}

	//---------------------------------------------------------------------
	private void grow()
	{
		// first, rotate start at zero, if necessary
		if (start)
		{
			rotate_array<T>::execute(data, start, count);
			start = 0;
			end = count;
		}

		// grow exponentially by 3/2
		int nsize = data.size*3/2 + (data.size <= 1);
		data.resize(nsize);
	}
}

#pragma once

#include "../Common.h"

#include <Lethe/Core/String/Name.h>

namespace lethe
{

class Stack;
class ConstPool;

enum
{
	BUILTIN_FMOD,
	BUILTIN_DMOD,
	BUILTIN_LDELSTR,
	BUILTIN_LDELSTR0,
	BUILTIN_LDELSTR1,
	BUILTIN_GDELSTR,
	BUILTIN_PDELSTR_NP,
	BUILTIN_VDELSTR,
	BUILTIN_PCOPYSTR,
	BUILTIN_VCOPYSTR,
	BUILTIN_LPUSHSTR_CONST,
	BUILTIN_APUSHSTR_CONST,
	BUILTIN_LPUSHSTR,
	BUILTIN_GSTRLOAD,
	BUILTIN_GSTRSTORE_NP,
	BUILTIN_GSTRSTORE,
	BUILTIN_LSTRSTORE_NP,
	BUILTIN_LSTRSTORE,
	BUILTIN_LSTRADD,
	BUILTIN_SCMPEQ,
	BUILTIN_SCMPNE,
	BUILTIN_SCMPLT,
	BUILTIN_SCMPLE,
	BUILTIN_SCMPGT,
	BUILTIN_SCMPGE,
	BUILTIN_CONV_CTOS,
	BUILTIN_CONV_ITOS,
	BUILTIN_CONV_UITOS,
	BUILTIN_CONV_LTOS,
	BUILTIN_CONV_ULTOS,
	BUILTIN_CONV_FTOS,
	BUILTIN_CONV_DTOS,
	BUILTIN_CONV_NTOS,
	BUILTIN_CONV_STON,
	BUILTIN_CONV_STOBOOL,
	BUILTIN_PLOADSTR,
	BUILTIN_PSTRSTORE_IMM_NP,
	BUILTIN_PSTRSTORE_IMM,
	BUILTIN_LPUSHNAME_CONST,
	BUILTIN_GETSTRCHAR,
	BUILTIN_NEW,
	BUILTIN_NEW_DYNAMIC,
	BUILTIN_DEC_WEAK,
	BUILTIN_TEST_WEAK_NULL,
	BUILTIN_DEC_STRONG,
	BUILTIN_STRONG_ZERO,
	BUILTIN_ADD_WEAK,
	BUILTIN_ADD_WEAK_NULL,
	BUILTIN_ADD_STRONG,
	BUILTIN_ISA,
	BUILTIN_ISA_NOPOP,
	BUILTIN_FIX_WEAK,
	BUILTIN_FIX_WEAK_REF,
	BUILTIN_FIX_STRONG,
	BUILTIN_FIX_ADD_WEAK,
	BUILTIN_FIX_ADD_STRONG,
	BUILTIN_PSTRADD_ASSIGN,
	BUILTIN_PSTRADD_ASSIGN_LOAD,
	BUILTIN_CMPDG_EQ,
	BUILTIN_CMPDG_NE,
	BUILTIN_NATIVE_CTOR,
	BUILTIN_NATIVE_DTOR,

	BUILTIN_PROF_ENTER,
	BUILTIN_PROF_EXIT,

	// 64-bit integer emulation
	// note: emulated integers don't check for zero pointer
	BUILTIN_PUSH_LCONST,
	BUILTIN_PUSHC_LCONST,
	BUILTIN_PLOAD64,
	BUILTIN_GLOAD64,
	BUILTIN_LPUSH64,
	BUILTIN_LSTORE64,
	BUILTIN_LSTORE64_NP,
	BUILTIN_GSTORE64,
	BUILTIN_GSTORE64_NP,
	BUILTIN_PSTORE64_IMM0,
	BUILTIN_PSTORE64_IMM0_NP,
	BUILTIN_PINC64,
	BUILTIN_PINC64_POST,

	BUILTIN_LADD,
	BUILTIN_LSUB,
	BUILTIN_LMUL,
	BUILTIN_LMOD,
	BUILTIN_ULMOD,
	BUILTIN_LDIV,
	BUILTIN_ULDIV,
	BUILTIN_LSAR,
	BUILTIN_LSHR,
	BUILTIN_LAND,
	BUILTIN_LOR,
	BUILTIN_LXOR,
	BUILTIN_LSHL,

	BUILTIN_LCMPEQ,
	BUILTIN_LCMPNE,
	BUILTIN_LCMPLT,
	BUILTIN_ULCMPLT,
	BUILTIN_LCMPLE,
	BUILTIN_ULCMPLE,
	BUILTIN_LCMPGT,
	BUILTIN_ULCMPGT,
	BUILTIN_LCMPGE,
	BUILTIN_ULCMPGE,

	BUILTIN_LNEG,
	BUILTIN_LNOT,
	BUILTIN_LCMPZ,
	BUILTIN_LCMPNZ,

	BUILTIN_CONV_LTOI,
	BUILTIN_CONV_ITOL,
	BUILTIN_CONV_UITOL,
	BUILTIN_CONV_LTOF,
	BUILTIN_CONV_LTOD,
	BUILTIN_CONV_ULTOF,
	BUILTIN_CONV_ULTOD,

	BUILTIN_CONV_FTOL,
	BUILTIN_CONV_FTOUL,
	BUILTIN_CONV_DTOL,
	BUILTIN_CONV_DTOUL,

	// string ref (view) stuff
	BUILTIN_CONV_STR_TO_AREF,
	BUILTIN_CONV_AREF_TO_STR,

	// new intrinsics
	BUILTIN_INTRIN_BSF,
	BUILTIN_INTRIN_BSR,
	BUILTIN_INTRIN_POPCNT,
	BUILTIN_INTRIN_BSWAP,
	BUILTIN_INTRIN_BSFL,
	BUILTIN_INTRIN_BSRL,
	BUILTIN_INTRIN_POPCNTL,
	BUILTIN_INTRIN_BSWAPL,

	BUILTIN_SET_STATE_LABEL,

	BUILTIN_INC_OBJECT_COUNTER,
	BUILTIN_DEC_OBJECT_COUNTER,

	BUILTIN_SLICEFWD_INPLACE,
	BUILTIN_SLICEFWD,

	BUILTIN_MARK_STRUCT_DELEGATE
};

class LETHE_API Builtin
{
public:
	static void OpCode_ProfEnter(Stack &stk);
	static void OpCode_ProfExit(Stack &stk);
	static void Opcode_New_Dynamic(Stack &stk);
	static void Opcode_New_Dynamic(Stack &stk, Name n, void *inst);
	static void Opcode_AddStrong(Stack &stk);
};

bool LETHE_API RegisterBuiltins(ConstPool &cpool);

}
